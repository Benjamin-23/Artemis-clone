// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
import { classNames, getTabIndex, getTemplate } from '@progress/kendo-vue-common';
/**
 * @hidden
 */

var FloatingActionButtonItemVue2 = {
  name: 'KendoVueFloatingActionButtonItem',
  props: {
    disabled: Boolean,
    focused: Boolean,
    index: Number,
    icon: String,
    item: [String, Function, Object],
    dataItem: Object,
    text: String,
    tabIndex: Number,
    customProp: [String, Function, Object]
  },
  // @ts-ignore
  emits: {
    'click': null,
    'down': null
  },
  mounted: function mounted() {
    this.element = this.v3 ? this.elementRef : this.$refs.element;
  },
  computed: {
    itemClassNames: function itemClassNames() {
      return classNames('k-fab-item', {
        'k-state-focus': this.focused,
        'k-state-disabled': this.disabled
      });
    }
  },
  methods: {
    handleClick: function handleClick(event) {
      if (this.$props.index !== undefined && !this.$props.disabled) {
        this.$emit('click', event, this.$props.index);
      }
    },
    focusElement: function focusElement() {
      if (this.$el) {
        this.$el.focus();
      }
    },
    onDown: function onDown(event) {
      this.$emit('down', event);
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var elementRef = ref(null);
    return {
      v3: v3,
      elementRef: elementRef
    };
  },
  render: function render(createElement) {
    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        disabled = _a.disabled,
        id = _a.id,
        tabIndex = _a.tabIndex,
        dataItem = _a.dataItem,
        customProp = _a.customProp;
    var text = dataItem.text,
        icon = dataItem.icon;
    var item;
    var itemDefaultRendering = h("li", {
      ref: this.v3 ? function (el) {
        _this.elementRef = el;
      } : 'element',
      id: id,
      attrs: this.v3 ? undefined : {
        id: id,
        role: 'menuitem',
        tabIndex: getTabIndex(tabIndex, disabled),
        "aria-disabled": disabled,
        "aria-label": (text || '') + " floatingactionbutton item",
        customProp: customProp
      },
      "class": this.itemClassNames,
      role: 'menuitem',
      tabIndex: getTabIndex(tabIndex, disabled),
      "aria-disabled": disabled,
      "aria-label": (text || '') + " floatingactionbutton item",
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "mousedown": this.onDown,
        "pointerdown": this.onDown
      },
      onMousedown: this.onDown,
      onPointerdown: this.onDown,
      customProp: customProp
    }, [text && h("span", {
      "class": "k-fab-item-text"
    }, [text]), icon && h("span", {
      "class": classNames("k-fab-item-icon k-icon k-i-" + icon)
    })]);
    item = getTemplate.call(this, {
      h: h,
      template: this.$props.item,
      defaultRendering: itemDefaultRendering,
      additionalProps: this.$props,
      additionalListeners: {
        click: this.handleClick
      }
    });
    return item;
  }
};
/**
 * @hidden
 */

var FloatingActionButtonItem = FloatingActionButtonItemVue2;
export { FloatingActionButtonItem, FloatingActionButtonItemVue2 };