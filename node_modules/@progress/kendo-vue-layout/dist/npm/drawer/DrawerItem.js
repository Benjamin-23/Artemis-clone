"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.DrawerItemVue2 = exports.DrawerItem = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");
/**
 * @hidden
 */


var DrawerItemVue2 = {
  name: 'KendoDrawerItem',
  // @ts-ignore
  emits: {
    click: null
  },
  props: {
    index: Number,
    text: String,
    icon: String,
    separator: Boolean,
    selected: Boolean,
    disabled: Boolean,
    targetItem: [Object, Array]
  },
  inject: {
    kendoDrawer: {
      default: null
    }
  },
  computed: {
    itemClassNames: function itemClassNames() {
      var _a = this.$props,
          disabled = _a.disabled,
          selected = _a.selected;
      return {
        'k-drawer-item': true,
        'k-state-selected': selected,
        'k-state-disabled': disabled
      };
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlot = kendo_vue_common_1.getDefaultSlots(this);
    var _a = this.$props,
        text = _a.text,
        icon = _a.icon,
        separator = _a.separator,
        disabled = _a.disabled,
        selected = _a.selected,
        tabIndex = _a.tabIndex;
    var _b = this.kendoDrawer,
        expanded = _b.expanded,
        mini = _b.mini,
        item = _b.item;
    return separator ? h("li", {
      "class": 'k-drawer-item k-drawer-separator',
      role: "presentation",
      attrs: this.v3 ? undefined : {
        role: "presentation"
      }
    }) : h("li", {
      "class": this.itemClassNames,
      role: "option",
      attrs: this.v3 ? undefined : {
        role: "option",
        "aria-selected": selected,
        "aria-disabled": disabled,
        tabIndex: kendo_vue_common_1.getTabIndex(tabIndex, disabled)
      },
      "aria-selected": selected,
      "aria-disabled": disabled,
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick
      },
      tabIndex: kendo_vue_common_1.getTabIndex(tabIndex, disabled)
    }, [!item ? [icon && h("span", {
      "class": 'k-icon ' + icon
    }), !expanded && mini ? null : h("span", {
      "class": 'k-item-text'
    }, [text])] : defaultSlot]);
  },
  methods: {
    focus: function focus(e) {
      if (this.$el) {
        this.$el.focus(e);
      }
    },
    handleClick: function handleClick() {
      if (!this.disabled) {
        var handle = {
          element: this.$el,
          focus: this.focus,
          props: __assign(__assign({}, this.$props), this.$attrs)
        };
        this.$emit('click', handle, this.$props.index);
      }
    }
  }
};
exports.DrawerItemVue2 = DrawerItemVue2;
/**
 * Represents the [Kendo UI for Vue Drawer component]({% slug overview_drawer %}).
 *
 * ```jsx
 *     <Drawer
 *       :expanded="expanded"
 *       :position="position"
 *       :mode="mode"
 *       :mini="true"
 *       :width="175"
 *       :items="
 *         items.map((item, index) => ({
 *           ...item,
 *           selected: index === selectedId,
 *         }))
 *       "
 *       :item="'CustomItem'"
 *       @select="onSelect"
 *     >
 *       <template v-slot:CustomItem="{ props }">
 *         <DrawerItem v-bind="props" @click="props.onClick">
 *           <span :class="'k-icon flag ' + props.flag" />
 *           <div class="item-descr-wrap">
 *             <div>{{ props.text }}</div>
 *             <span class="item-descr">Capital of {{ props.country }}</span>
 *           </div>
 *         </DrawerItem>
 *       </template>
 *       <DrawerContent>
 *         <router-view />
 *       </DrawerContent>
 *     </Drawer>
 * ```
 *
 */

var DrawerItem = DrawerItemVue2;
exports.DrawerItem = DrawerItem;