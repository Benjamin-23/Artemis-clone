"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.StepVue2 = exports.Step = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var inject = allVue.inject;

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var contants_1 = require("./contants");

var messages_1 = require("./messages");
/**
 * @hidden
 */


var StepVue2 = {
  name: 'KendoStep',
  props: {
    current: Boolean,
    disabled: Boolean,
    icon: String,
    index: Number,
    isValid: Boolean,
    focused: Boolean,
    label: String,
    optional: Boolean,
    tabIndex: {
      type: Number,
      default: 0
    },
    text: String,
    animationDuration: [Boolean, Number],
    isVertical: Boolean,
    item: [String, Object, Boolean, Function],
    linear: Boolean,
    mode: String,
    numOfSteps: Number,
    value: Number,
    successIcon: String,
    errorIcon: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  computed: {
    itemClassNames: function itemClassNames() {
      var _a = this.$props,
          current = _a.current,
          disabled = _a.disabled,
          focused = _a.focused,
          index = _a.index,
          isValid = _a.isValid,
          optional = _a.optional;
      return {
        'k-step': true,
        'k-step-first': index === 0,
        'k-step-last': this.numOfSteps && index === this.numOfSteps - 1,
        'k-step-done': index < this.value,
        'k-step-current': current,
        'k-step-optional': optional,
        'k-step-disabled': disabled,
        'k-step-focus': focused,
        'k-step-error': isValid !== undefined && !isValid,
        'k-step-success': isValid
      };
    },
    itemStyles: function itemStyles() {
      var index = this.$props.index;
      var allowClick = !this.linear || index === this.value - 1 || index === this.value || index === this.value + 1;
      return {
        maxWidth: !this.isVertical ? "calc(100% / " + this.numOfSteps + ")" : undefined,
        pointerEvents: !allowClick ? 'none' : undefined
      };
    }
  },
  watch: {
    focused: function focused(newValue) {
      this.aElement = this.$refs.aElement;

      if (this.aElement && newValue) {
        this.aElement.focus();
      }
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    var kendoLocalizationService = inject('kendoLocalizationService', {});
    return {
      v3: v3,
      kendoLocalizationService: kendoLocalizationService
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = kendo_vue_common_1.getDefaultSlots(this);
    var _a = this.$props,
        current = _a.current,
        disabled = _a.disabled,
        focused = _a.focused,
        icon = _a.icon,
        index = _a.index,
        isValid = _a.isValid,
        label = _a.label,
        optional = _a.optional,
        tabIndex = _a.tabIndex,
        text = _a.text,
        animationDuration = _a.animationDuration,
        item = _a.item,
        linear = _a.linear,
        mode = _a.mode,
        value = _a.value,
        successIcon = _a.successIcon,
        errorIcon = _a.errorIcon;
    var allowClick = !linear || index === value - 1 || index === value || index === value + 1;
    var isInLabel = mode === 'labels' || Boolean(icon) && Boolean(label);
    var localizationService = kendo_vue_intl_1.provideLocalizationService(this);

    var localizeMessage = function localizeMessage(message) {
      return localizationService.toLanguageString(message, messages_1.messages[message]);
    };

    var optionalMessage = localizeMessage(messages_1.optionalText);
    var progressAnimation = typeof animationDuration === 'number' ? animationDuration : animationDuration !== false ? contants_1.DEFAULT_ANIMATION_DURATION : contants_1.NO_ANIMATION;
    var validationIconClasses = isValid ? successIcon ? "" + successIcon : 'k-icon k-i-check' : errorIcon ? "" + errorIcon : 'k-icon k-i-warning';
    var validationIcons = h("span", {
      "class": 'k-step-indicator-icon ' + validationIconClasses,
      "aria-hidden": "true",
      attrs: this.v3 ? undefined : {
        "aria-hidden": "true"
      }
    });

    var stepIndicator = function stepIndicator() {
      return mode !== 'labels' ? h("span", {
        "class": "k-step-indicator",
        "aria-hidden": true,
        attrs: this.v3 ? undefined : {
          "aria-hidden": true
        },
        style: {
          transitionDuration: progressAnimation + 'ms'
        }
      }, [icon ? !isInLabel && isValid !== undefined ? validationIcons : h("span", {
        "class": "k-step-indicator-icon k-icon " + icon
      }) : isValid !== undefined ? validationIcons : h("span", {
        "class": "k-step-indicator-text"
      }, [text ? text : index + 1])]) : null;
    };

    var stepLabel = function stepLabel() {
      return h("span", {
        "class": "k-step-label"
      }, [label && h("span", {
        "class": "k-step-text"
      }, [label]), isInLabel && isValid !== undefined && validationIcons, optional && h("span", {
        "class": "k-step-label-optional"
      }, [optionalMessage])]);
    };

    return h("li", {
      "class": this.itemClassNames,
      style: this.itemStyles
    }, [h("a", {
      ref: "aElement",
      "class": "k-step-link",
      title: label ? label : undefined,
      attrs: this.v3 ? undefined : {
        title: label ? label : undefined,
        tabIndex: focused ? tabIndex : -1,
        "aria-current": current ? 'step' : undefined,
        "aria-disabled": disabled || !allowClick || undefined,
        "aria-invalid": isValid !== undefined && !isValid || undefined
      },
      onClick: this.handleClick,
      on: this.v3 ? undefined : {
        "click": this.handleClick,
        "focusin": this.handleFocus
      },
      onFocusin: this.handleFocus,
      tabIndex: focused ? tabIndex : -1,
      "aria-current": current ? 'step' : undefined,
      "aria-disabled": disabled || !allowClick || undefined,
      "aria-invalid": isValid !== undefined && !isValid || undefined
    }, [!item ? [stepIndicator.call(this), stepLabel.call(this)] : defaultSlots])]);
  },
  methods: {
    focus: function focus() {
      if (this.$el) {
        kendo_vue_common_1.focusFirstFocusableChild(this.$el);
      }
    },
    handleClick: function handleClick(event) {
      if (!this.disabled) {
        this.$emit('change', {
          event: event,
          value: this.index,
          component: this
        });
      }
    },
    handleFocus: function handleFocus(event) {
      if (!this.disabled) {
        this.$emit('focus', event);
      }
    }
  }
};
exports.StepVue2 = StepVue2;
/**
 * Represents the [Kendo UI for Vue Step component]({% slug overview_stepper %}).
 *
 * ```jsx
 * <Step v-bind="props" @change="(e) => props.onChange(e)">
 * <span class="k-step-indicator" aria-hidden="true">
 *    <span class="emoji">{{ props.emoji }}</span>
 * </span>
 * <span class="k-step-label">
 *    <span class="k-step-text">{{ props.label }}</span>
 * </span>
 * </Step>
 * ```
 */

var Step = StepVue2;
exports.Step = Step;