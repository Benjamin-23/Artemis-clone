"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.TabStripContentVue2 = exports.TabStripContent = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;
var ref = allVue.ref;
var inject = allVue.inject;

var kendo_vue_animation_1 = require("@progress/kendo-vue-animation");

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var utils_1 = require("./utils");
/**
 * @hidden
 */


var TabStripContentVue2 = {
  name: 'KendoTabStripContent',
  props: {
    showAll: Boolean,
    animation: Boolean,
    tabs: Array,
    selected: Number,
    hasTabs: Boolean
  },
  created: function created() {
    this.contentId = kendo_vue_common_1.guid();
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  data: function data() {
    return {
      midAnimation: false
    };
  },
  computed: {
    animationClass: function animationClass() {
      var that = this;
      return this.tabs.map(function (_t, idx) {
        var visible = idx === that.$props.selected;
        return {
          'k-fade-appear': that.animation && !visible,
          'k-fade-enter-active': that.animation && visible
        };
      });
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        tabs = _a.tabs,
        selected = _a.selected,
        showAll = _a.showAll,
        hasTabs = _a.hasTabs;
    var selectedTab = tabs && typeof selected === 'number' && tabs[selected];
    var defaultSlots = kendo_vue_common_1.getDefaultSlots(this);
    var innerTabs = hasTabs ? tabs : utils_1.getTabs.call(this, [], defaultSlots || []);
    var tabStyles = selected < innerTabs.length && selected > -1;
    var contentClasses = kendo_vue_common_1.classNames({
      'k-content': tabStyles
    }, {
      'k-state-active': tabStyles
    }, selectedTab && selectedTab.contentClassName);

    var renderChild = function renderChild(tab, idx) {
      var _this = this;

      var visible = idx === this.$props.selected;
      var animationStyle = {
        position: 'initial',
        height: visible ? undefined : '0px',
        width: visible ? undefined : '0px'
      };
      var content = hasTabs ? kendo_vue_common_1.getTemplate.call(this, {
        h: h,
        template: tab.content,
        defaultRendering: null
      }) : tab;
      return (// @ts-ignore function children
        h(kendo_vue_animation_1.Fade, {
          appear: this.v3 ? true : visible,
          attrs: this.v3 ? undefined : {
            appear: this.v3 ? true : visible,
            enter: this.$props.animation,
            exit: this.$props.keepTabsMounted
          },
          key: idx,
          "class": this.animationClass[idx],
          enter: this.$props.animation,
          exit: this.$props.keepTabsMounted,
          style: animationStyle
        }, this.v3 ? function () {
          return [h("div", {
            role: 'tabpanel',
            attrs: _this.v3 ? undefined : {
              role: 'tabpanel',
              "aria-expanded": true,
              id: String(_this.contentId + idx)
            },
            "aria-expanded": true,
            id: String(_this.contentId + idx),
            key: idx
          }, [//  hasTabs ? 
          //     visible ? content : null
          //     : 
          content])];
        } : [h("div", {
          role: 'tabpanel',
          attrs: _this.v3 ? undefined : {
            role: 'tabpanel',
            "aria-expanded": true,
            id: String(_this.contentId + idx)
          },
          "aria-expanded": true,
          id: String(_this.contentId + idx),
          key: idx
        }, [content])])
      );
    };

    var renderContent = function renderContent() {
      return innerTabs.map(function (tab, idx) {
        return renderChild.call(this, tab, idx);
      }, this);
    };

    return h("div", {
      "class": contentClasses,
      style: this.$props.style
    }, [renderContent.call(this)]);
  }
};
exports.TabStripContentVue2 = TabStripContentVue2;
/**
 * @hidden
 */

var TabStripContent = TabStripContentVue2;
exports.TabStripContent = TabStripContent;