// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { avatarType } from './interfaces/Enums';
import { packageMetadata } from '../package-metadata';
import { getDefaultSlots, validatePackage, kendoThemeMaps } from '@progress/kendo-vue-common';
/**
 * @hidden
 */

var AvatarVue2 = {
  name: 'KendoAvatar',
  props: {
    type: {
      type: String,
      default: avatarType.TEXT,
      validator: function validator(value) {
        return ['text', 'image', 'icon'].includes(value);
      }
    },
    border: Boolean,
    rounded: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large', 'full'].includes(value);
      }
    },
    fillMode: {
      type: String,
      default: 'solid',
      validator: function validator(value) {
        return ['solid', 'outline'].includes(value);
      }
    },
    size: {
      type: String,
      default: 'medium',
      validator: function validator(value) {
        return ['small', 'medium', 'large'].includes(value);
      }
    },
    themeColor: {
      type: String,
      default: 'primary',
      validator: function validator(value) {
        return ['primary', 'secondary', 'tertiary', 'info', 'success', 'warning', 'error', 'dark', 'light', 'inverse', 'inherit'].includes(value);
      }
    }
  },
  created: function created() {
    validatePackage(packageMetadata);
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  computed: {
    wrapperClass: function wrapperClass() {
      var _a;

      var _b = this.$props,
          border = _b.border,
          type = _b.type,
          size = _b.size,
          rounded = _b.rounded,
          fillMode = _b.fillMode,
          themeColor = _b.themeColor;
      return _a = {
        'k-avatar-bordered': border,
        'k-avatar': true
      }, _a["k-avatar-" + (kendoThemeMaps.sizeMap[size] || size)] = size, _a["k-rounded-" + (kendoThemeMaps.roundedMap[rounded] || rounded)] = rounded, _a["k-avatar-" + fillMode] = fillMode, _a["k-avatar-" + fillMode + "-" + themeColor] = Boolean(fillMode && themeColor), _a;
    },
    innerClass: function innerClass() {
      var _a;

      return _a = {}, _a["k-avatar-" + this.$props.type] = this.$props.type, _a;
    }
  },
  render: function render(createElement) {
    var h = gh || createElement;
    var defaultSlots = getDefaultSlots(this);
    return h("div", {
      "class": this.wrapperClass
    }, [h("span", {
      "class": this.innerClass
    }, [defaultSlots])]);
  }
};
/**
 * @hidden
 */

var Avatar = AvatarVue2;
export { Avatar, AvatarVue2 };