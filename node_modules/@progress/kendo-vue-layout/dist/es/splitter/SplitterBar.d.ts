import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from '../additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { SplitterPaneExtendedProps } from './SplitterPane';
/**
 * @hidden
 */
export interface SplitterBarProps {
    orientation: 'vertical' | 'horizontal' | string;
    index: number;
    prev: SplitterPaneExtendedProps;
    next: SplitterPaneExtendedProps;
    onDrag?: (event: any, element: HTMLDivElement, index: number, isFirst: boolean, isLast: boolean) => void;
    onToggle?: (index: number, nativeEvent: any) => void;
    onKeyboardResize?: (element: HTMLDivElement, index: number, delta: number, nativeEvent: any) => void;
}
/**
 * @hidden
 */
export interface SplitterBarState {
    draggable: any | null;
}
/**
 * @hidden
 */
export interface SplitterBarComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SplitterBarMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface SplitterBarData {
    focused: boolean;
}
/**
 * @hidden
 */
export interface SplitterBarAll extends Vue2type, SplitterBarMethods, SplitterBarData, SplitterBarComputed, SplitterBarState {
}
/**
 * @hidden
 */
declare let SplitterBarVue2: ComponentOptions<SplitterBarAll, DefaultData<SplitterBarData>, DefaultMethods<SplitterBarAll>, SplitterBarComputed, RecordPropsDefinition<SplitterBarProps>>;
/**
 * @hidden
 */
declare const SplitterBar: DefineComponent<SplitterBarProps, any, SplitterBarData, SplitterBarComputed, SplitterBarMethods, {}, {}, {}, string, SplitterBarProps, SplitterBarProps, {}>;
export { SplitterBar, SplitterBarVue2 };
