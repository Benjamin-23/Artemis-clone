// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { classNames, Draggable, Keys } from '@progress/kendo-vue-common';
/**
 * @hidden
 */

var SplitterBarVue2 = {
  name: 'KendoSplitterBar',
  // @ts-ignore
  emits: {
    drag: null,
    toggle: null,
    keyboardresize: null
  },
  props: {
    orientation: {
      type: String,
      default: 'vertical',
      validator: function validator(value) {
        return ['vertical', 'horizontal'].includes(value);
      }
    },
    index: Number,
    prev: Object,
    next: Object
  },
  created: function created() {
    this.draggable = null;
  },
  computed: {
    isStatic: function isStatic() {
      var _a = this.$props,
          prev = _a.prev,
          next = _a.next;
      var betweenResizablePanes = prev.resizable && next.resizable;
      var nearCollapsiblePane = prev.collapsible || next.collapsible;
      return !betweenResizablePanes && !nearCollapsiblePane;
    },
    isDraggable: function isDraggable() {
      var _a = this.$props,
          prev = _a.prev,
          next = _a.next;
      var betweenResizablePanes = prev.resizable && next.resizable;
      var nearCollapsedPane = prev.collapsed || next.collapsed;
      return !!betweenResizablePanes && !nearCollapsedPane;
    },
    isHorizontal: function isHorizontal() {
      return this.$props.orientation === 'horizontal';
    }
  },
  data: function data() {
    return {
      focused: false
    };
  },
  mounted: function mounted() {
    if (this.$el) {
      this.draggable = this.$refs.draggable;
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var _a;

    var _this = this;

    var h = gh || createElement;
    var isDraggable = this.isDraggable;
    var isStatic = this.isStatic;
    var isHorizontal = this.isHorizontal;
    var barClasses = classNames('k-splitbar', (_a = {}, _a['k-state-focused'] = this.focused, _a['k-splitbar-horizontal'] = isHorizontal, _a['k-splitbar-vertical'] = !isHorizontal, _a['k-splitbar-draggable-horizontal'] = isHorizontal && isDraggable, _a['k-splitbar-draggable-vertical'] = !isHorizontal && isDraggable, _a['k-splitbar-static-horizontal'] = isHorizontal && isStatic, _a['k-splitbar-static-vertical'] = !isHorizontal && isStatic, _a));
    var previousArrowClass = this.previousArrowClass(isHorizontal);
    var nextArrowClass = this.nextArrowClass(isHorizontal);
    return (// @ts-ignore  function children
      h(Draggable, {
        onPress: function onPress(event) {
          return _this.onDrag(event, true, false);
        },
        on: this.v3 ? undefined : {
          "press": function onPress(event) {
            return _this.onDrag(event, true, false);
          },
          "drag": function drag(event) {
            return _this.onDrag(event, false, false);
          },
          "release": function release(event) {
            return _this.onDrag(event, false, true);
          }
        },
        onDrag: function drag(event) {
          return _this.onDrag(event, false, false);
        },
        onRelease: function release(event) {
          return _this.onDrag(event, false, true);
        },
        ref: 'draggable'
      }, this.v3 ? function () {
        return [h("div", {
          tabIndex: isStatic ? -1 : 0,
          attrs: _this2.v3 ? undefined : {
            tabIndex: isStatic ? -1 : 0,
            role: 'separator'
          },
          role: 'separator',
          "class": barClasses,
          style: {
            touchAction: 'none'
          },
          onFocusin: _this2.onFocus,
          on: _this2.v3 ? undefined : {
            "focusin": _this2.onFocus,
            "focusout": _this2.onBlur,
            "dblclick": _this2.onToggle,
            "keydown": _this2.onKeyDown
          },
          onFocusout: _this2.onBlur,
          onDblclick: _this2.onToggle,
          onKeydown: _this2.onKeyDown
        }, [h("div", {
          "class": previousArrowClass,
          onClick: _this2.onPrevToggle,
          on: _this2.v3 ? undefined : {
            "click": _this2.onPrevToggle
          }
        }), h("div", {
          "class": 'k-resize-handle'
        }), h("div", {
          "class": nextArrowClass,
          onClick: _this2.onNextToggle,
          on: _this2.v3 ? undefined : {
            "click": _this2.onNextToggle
          }
        })])];
      } : [h("div", {
        tabIndex: isStatic ? -1 : 0,
        attrs: _this2.v3 ? undefined : {
          tabIndex: isStatic ? -1 : 0,
          role: 'separator'
        },
        role: 'separator',
        "class": barClasses,
        style: {
          touchAction: 'none'
        },
        onFocusin: _this2.onFocus,
        on: _this2.v3 ? undefined : {
          "focusin": _this2.onFocus,
          "focusout": _this2.onBlur,
          "dblclick": _this2.onToggle,
          "keydown": _this2.onKeyDown
        },
        onFocusout: _this2.onBlur,
        onDblclick: _this2.onToggle,
        onKeydown: _this2.onKeyDown
      }, [h("div", {
        "class": previousArrowClass,
        onClick: _this2.onPrevToggle,
        on: _this2.v3 ? undefined : {
          "click": _this2.onPrevToggle
        }
      }), h("div", {
        "class": 'k-resize-handle'
      }), h("div", {
        "class": nextArrowClass,
        onClick: _this2.onNextToggle,
        on: _this2.v3 ? undefined : {
          "click": _this2.onNextToggle
        }
      })])])
    );
  },
  methods: {
    onDrag: function onDrag(data, isFirst, isLast) {
      var event = data;
      var index = this.$props.index;
      var element = this.draggable && this.draggable.element;

      if (!isLast && event) {
        event.originalEvent.preventDefault();
      }

      if (element && !this.isStatic && this.isDraggable) {
        this.$emit('drag', event, element, index, isFirst, isLast);
      }
    },
    onFocus: function onFocus() {
      this.focused = true;
    },
    onBlur: function onBlur() {
      this.focused = false;
    },
    onToggle: function onToggle(event) {
      var _a = this.$props,
          index = _a.index,
          prev = _a.prev,
          next = _a.next;

      if (prev.collapsible || next.collapsible) {
        this.$emit('toggle', prev.collapsible ? index : index + 1, event);
      }
    },
    onPrevToggle: function onPrevToggle(event) {
      var _a = this.$props,
          index = _a.index,
          prev = _a.prev;

      if (prev.collapsible) {
        this.$emit('toggle', index, event);
      }
    },
    onNextToggle: function onNextToggle(event) {
      var _a = this.$props,
          index = _a.index,
          next = _a.next;

      if (next.collapsible) {
        this.$emit('toggle', index + 1, event);
      }
    },
    onKeyDown: function onKeyDown(event) {
      var _this = this;

      var keyCode = event && event.keyCode;
      var isHorizontal = this.isHorizontal;
      var index = this.$props.index;
      var element = this.draggable && this.draggable.element;

      var onKeyboardResize = function onKeyboardResize(el, idx, offset) {
        event.preventDefault();

        _this.$emit('keyboardresize', el, idx, offset, event);
      };

      if (!element) {
        return;
      }

      if (keyCode === Keys.enter) {
        event.preventDefault();
        this.onToggle(event);
      } else if (this.isDraggable) {
        if (isHorizontal && keyCode === Keys.left) {
          onKeyboardResize(element, index, -10);
        } else if (isHorizontal && keyCode === Keys.right) {
          onKeyboardResize(element, index, 10);
        } else if (!isHorizontal && keyCode === Keys.up) {
          onKeyboardResize(element, index, -10);
        } else if (!isHorizontal && keyCode === Keys.down) {
          onKeyboardResize(element, index, 10);
        }
      }
    },
    previousArrowClass: function previousArrowClass(isHorizontal) {
      var _a;

      var prev = this.$props.prev;
      var isCollapsible = prev.collapsible;
      var isCollapsed = prev.collapsed;
      return classNames('k-icon', (_a = {}, _a['k-hidden'] = !isCollapsible, _a['k-collapse-prev'] = isCollapsible, _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && !isCollapsed, _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && isCollapsed, _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && !isCollapsed, _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && isCollapsed, _a));
    },
    nextArrowClass: function nextArrowClass(isHorizontal) {
      var _a;

      var next = this.$props.next;
      var isCollapsible = next.collapsible;
      var isCollapsed = next.collapsed;
      return classNames('k-icon', (_a = {}, _a['k-hidden'] = !isCollapsible, _a['k-collapse-next'] = isCollapsible, _a['k-i-arrow-60-right'] = isCollapsible && isHorizontal && !isCollapsed, _a['k-i-arrow-60-left'] = isCollapsible && isHorizontal && isCollapsed, _a['k-i-arrow-60-down'] = isCollapsible && !isHorizontal && !isCollapsed, _a['k-i-arrow-60-up'] = isCollapsible && !isHorizontal && isCollapsed, _a));
    }
  }
};
/**
 * @hidden
 */

var SplitterBar = SplitterBarVue2;
export { SplitterBar, SplitterBarVue2 };