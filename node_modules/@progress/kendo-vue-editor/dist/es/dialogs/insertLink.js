// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { Dialog, DialogActionsBar } from '@progress/kendo-vue-dialogs';
import { Button as KButton } from '@progress/kendo-vue-buttons';
import { getMark, applyLink } from '@progress/kendo-editor-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages } from './../messages';
/**
 * @hidden
 */

var InsertLinkDialogVue2 = {
  name: 'KendoInsertLinkDialog',
  // @ts-ignore
  emits: {
    close: null
  },
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  mounted: function mounted() {
    this.href = this.v3 ? this.hrefRef : this.$refs.href;
    this.title = this.v3 ? this.titleRef : this.$refs.title;
    this.target = this.v3 ? this.targetRef : this.$refs.target;

    if (this.href) {
      this.href.focus();
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        view = _a.view,
        settings = _a.settings,
        dir = _a.dir;
    var localization = provideLocalizationService(this);
    var _b = settings.messages,
        insertHyperlinkDialogTitle = _b.insertHyperlinkDialogTitle,
        insertHyperlinkAddress = _b.insertHyperlinkAddress,
        insertHyperlinkTitle = _b.insertHyperlinkTitle,
        insertHyperlinkNewWindow = _b.insertHyperlinkNewWindow,
        insertHyperlinkCancel = _b.insertHyperlinkCancel,
        insertHyperlinkInsert = _b.insertHyperlinkInsert;
    var linkMark = view ? getMark(view.state, view.state.schema.marks[settings.mark]) : false;
    var content = h("div", {
      "class": "k-edit-form-container"
    }, [h("div", {
      "class": "k-edit-label"
    }, [h("label", {
      "for": "k-editor-link-url",
      attrs: this.v3 ? undefined : {
        "for": "k-editor-link-url"
      }
    }, [localization.toLanguageString(insertHyperlinkAddress, messages[insertHyperlinkAddress])])]), h("div", {
      "class": "k-edit-field"
    }, [h("span", {
      "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
    }, [h("input", {
      type: "text",
      attrs: this.v3 ? undefined : {
        type: "text",
        id: "k-editor-link-url"
      },
      "class": "k-input-inner",
      ref: this.v3 ? function (el) {
        _this.hrefRef = el;
      } : 'href',
      id: "k-editor-link-url",
      value: this.v3 ? linkMark && linkMark.attrs.href || undefined : null,
      domProps: this.v3 ? undefined : {
        "value": linkMark && linkMark.attrs.href || undefined
      }
    })])]), h("div", {
      "class": "k-edit-label k-editor-link-text-row"
    }, [h("label", {
      "for": "k-editor-link-text",
      attrs: this.v3 ? undefined : {
        "for": "k-editor-link-text"
      }
    }, [localization.toLanguageString(insertHyperlinkTitle, messages[insertHyperlinkTitle])])]), h("div", {
      "class": "k-edit-field k-editor-link-text-row"
    }, [h("span", {
      "class": "k-textbox k-input k-input-md k-rounded-md k-input-solid"
    }, [h("input", {
      type: "text",
      attrs: this.v3 ? undefined : {
        type: "text",
        id: "k-editor-link-text"
      },
      "class": "k-input-inner",
      id: "k-editor-link-text",
      ref: this.v3 ? function (el) {
        _this.titleRef = el;
      } : 'title',
      value: this.v3 ? linkMark && linkMark.attrs.title || undefined : null,
      domProps: this.v3 ? undefined : {
        "value": linkMark && linkMark.attrs.title || undefined
      }
    })])]), settings.linkTarget !== false && h("div", {
      "class": "k-edit-field"
    }, [h("input", {
      type: "checkbox",
      attrs: this.v3 ? undefined : {
        type: "checkbox",
        id: "k-editor-link-target"
      },
      "class": "k-checkbox k-checkbox-md k-rounded-md",
      id: "k-editor-link-target",
      ref: this.v3 ? function (el) {
        _this.targetRef = el;
      } : 'target',
      checked: this.v3 ? linkMark && !!linkMark.attrs.target || undefined : null,
      domProps: this.v3 ? undefined : {
        "checked": linkMark && !!linkMark.attrs.target || undefined
      }
    }), h("label", {
      "for": "k-editor-link-target",
      attrs: this.v3 ? undefined : {
        "for": "k-editor-link-target"
      },
      "class": "k-checkbox-label"
    }, [localization.toLanguageString(insertHyperlinkNewWindow, messages[insertHyperlinkNewWindow])])])]);
    var dialog = // @ts-ignore function children
    h(Dialog, {
      title: localization.toLanguageString(insertHyperlinkDialogTitle, messages[insertHyperlinkDialogTitle]),
      attrs: this.v3 ? undefined : {
        title: localization.toLanguageString(insertHyperlinkDialogTitle, messages[insertHyperlinkDialogTitle]),
        closeIcon: true,
        dir: dir
      },
      onClose: this.onClose,
      on: this.v3 ? undefined : {
        "close": this.onClose
      },
      closeIcon: true,
      dir: dir,
      style: dir === 'rtl' ? {
        textAlign: 'right'
      } : undefined
    }, this.v3 ? function () {
      return [content, // @ts-ignore function children
      h(DialogActionsBar, _this2.v3 ? function () {
        return [// @ts-ignore function children
        h(KButton, {
          type: "button",
          attrs: _this2.v3 ? undefined : {
            type: "button",
            dir: dir
          },
          onClick: _this2.onClose,
          on: _this2.v3 ? undefined : {
            "click": _this2.onClose
          },
          dir: dir,
          key: "cancel"
        }, _this2.v3 ? function () {
          return [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])];
        } : [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])]), // @ts-ignore function children
        h(KButton, {
          type: "button",
          attrs: _this2.v3 ? undefined : {
            type: "button",
            themeColor: 'primary',
            dir: dir
          },
          onClick: _this2.onInsert,
          on: _this2.v3 ? undefined : {
            "click": _this2.onInsert
          },
          themeColor: 'primary',
          dir: dir,
          key: "insert"
        }, _this2.v3 ? function () {
          return [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])];
        } : [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])])];
      } : [h(KButton, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          dir: dir
        },
        onClick: _this2.onClose,
        on: _this2.v3 ? undefined : {
          "click": _this2.onClose
        },
        dir: dir,
        key: "cancel"
      }, _this2.v3 ? function () {
        return [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])];
      } : [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])]), h(KButton, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          themeColor: 'primary',
          dir: dir
        },
        onClick: _this2.onInsert,
        on: _this2.v3 ? undefined : {
          "click": _this2.onInsert
        },
        themeColor: 'primary',
        dir: dir,
        key: "insert"
      }, _this2.v3 ? function () {
        return [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])];
      } : [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])])])];
    } : [content, h(DialogActionsBar, _this2.v3 ? function () {
      return [h(KButton, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          dir: dir
        },
        onClick: _this2.onClose,
        on: _this2.v3 ? undefined : {
          "click": _this2.onClose
        },
        dir: dir,
        key: "cancel"
      }, _this2.v3 ? function () {
        return [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])];
      } : [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])]), h(KButton, {
        type: "button",
        attrs: _this2.v3 ? undefined : {
          type: "button",
          themeColor: 'primary',
          dir: dir
        },
        onClick: _this2.onInsert,
        on: _this2.v3 ? undefined : {
          "click": _this2.onInsert
        },
        themeColor: 'primary',
        dir: dir,
        key: "insert"
      }, _this2.v3 ? function () {
        return [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])];
      } : [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])])];
    } : [h(KButton, {
      type: "button",
      attrs: _this2.v3 ? undefined : {
        type: "button",
        dir: dir
      },
      onClick: _this2.onClose,
      on: _this2.v3 ? undefined : {
        "click": _this2.onClose
      },
      dir: dir,
      key: "cancel"
    }, _this2.v3 ? function () {
      return [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])];
    } : [localization.toLanguageString(insertHyperlinkCancel, messages[insertHyperlinkCancel])]), h(KButton, {
      type: "button",
      attrs: _this2.v3 ? undefined : {
        type: "button",
        themeColor: 'primary',
        dir: dir
      },
      onClick: _this2.onInsert,
      on: _this2.v3 ? undefined : {
        "click": _this2.onInsert
      },
      themeColor: 'primary',
      dir: dir,
      key: "insert"
    }, _this2.v3 ? function () {
      return [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])];
    } : [localization.toLanguageString(insertHyperlinkInsert, messages[insertHyperlinkInsert])])])]);
    return dialog;
  },
  methods: {
    onClose: function onClose() {
      this.$props.view.focus();
      this.$emit('close');
    },
    onInsert: function onInsert() {
      var view = this.$props.view;
      var mark = this.$props.settings.mark;
      var attrs = {
        href: this.href ? this.href.value : undefined,
        title: this.title ? this.title.value : undefined,
        target: this.target && this.target.checked ? '_blank' : undefined
      };
      applyLink({
        mark: mark,
        attrs: attrs
      }, this.$props.settings.commandName)(view.state, view.dispatch);
      this.onClose();
    }
  }
};
/**
 * @hidden
 */

var InsertLinkDialog = InsertLinkDialogVue2;
export { InsertLinkDialog, InsertLinkDialogVue2 };