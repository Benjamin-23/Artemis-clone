// @ts-ignore
import * as Vue from 'vue';
var allVue = Vue;
var gh = allVue.h;
import { Dialog, DialogActionsBar } from '@progress/kendo-vue-dialogs';
import { Button as KButton } from '@progress/kendo-vue-buttons';
import { getHtml, setHtml, indentHtml, trimWhitespace } from '@progress/kendo-editor-common';
import { provideLocalizationService } from '@progress/kendo-vue-intl';
import { messages } from './../messages';
import { editorPropsKey } from './../utils/props-key';
/**
 * @hidden
 */

var ViewHtmlDialogVue2 = {
  name: 'KendoViewHtmlDialog',
  props: {
    view: Object,
    settings: Object,
    dir: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  mounted: function mounted() {
    this.htmlArea = this.v3 ? this.htmlAreaRef : this.$refs.htmlArea;
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var _this2 = this;

    var _this = this;

    var h = gh || createElement;
    var _a = this.$props,
        view = _a.view,
        settings = _a.settings,
        dir = _a.dir;
    var localization = provideLocalizationService(this);
    var _b = settings.messages,
        viewHtmlDialogTitle = _b.viewHtmlDialogTitle,
        viewHtmlCancel = _b.viewHtmlCancel,
        viewHtmlUpdate = _b.viewHtmlUpdate;
    var content = h("textarea", {
      "class": "k-textarea k-editor-textarea",
      style: {
        height: '280px',
        width: '490px'
      },
      ref: this.v3 ? function (el) {
        _this.htmlAreaRef = el;
      } : 'htmlArea',
      value: this.v3 ? indentHtml(getHtml(view.state)) : null,
      domProps: this.v3 ? undefined : {
        "value": indentHtml(getHtml(view.state))
      }
    });
    var actionButtons = [// @ts-ignore function children
    h(KButton, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        dir: dir
      },
      onClick: this.onClose,
      on: this.v3 ? undefined : {
        "click": this.onClose
      },
      dir: dir,
      key: "cancel"
    }, this.v3 ? function () {
      return [localization.toLanguageString(viewHtmlCancel, messages[viewHtmlCancel])];
    } : [localization.toLanguageString(viewHtmlCancel, messages[viewHtmlCancel])]), // @ts-ignore function children
    h(KButton, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        themeColor: 'primary',
        dir: dir
      },
      onClick: this.onUpdate,
      on: this.v3 ? undefined : {
        "click": this.onUpdate
      },
      themeColor: 'primary',
      dir: dir,
      key: "update"
    }, this.v3 ? function () {
      return [localization.toLanguageString(viewHtmlUpdate, messages[viewHtmlUpdate])];
    } : [localization.toLanguageString(viewHtmlUpdate, messages[viewHtmlUpdate])])];
    var dialog = // @ts-ignore function children
    h(Dialog, {
      title: localization.toLanguageString(viewHtmlDialogTitle, messages[viewHtmlDialogTitle]),
      attrs: this.v3 ? undefined : {
        title: localization.toLanguageString(viewHtmlDialogTitle, messages[viewHtmlDialogTitle]),
        closeIcon: true,
        dir: dir
      },
      onClose: this.onClose,
      on: this.v3 ? undefined : {
        "close": this.onClose
      },
      key: "dialog",
      closeIcon: true,
      dir: dir,
      style: dir === 'rtl' ? {
        textAlign: 'right'
      } : undefined
    }, this.v3 ? function () {
      return [content, // @ts-ignore function children
      h(DialogActionsBar, _this2.v3 ? function () {
        return [actionButtons];
      } : [actionButtons])];
    } : [content, h(DialogActionsBar, _this2.v3 ? function () {
      return [actionButtons];
    } : [actionButtons])]);
    return dialog;
  },
  methods: {
    onUpdate: function onUpdate() {
      var _a = this.$props,
          view = _a.view,
          settings = _a.settings;
      var html = trimWhitespace(this.htmlArea ? this.htmlArea.value : '');
      var preserveWhitespace = editorPropsKey.getState(view.state).preserveWhitespace;
      setHtml(html, settings.commandName, {
        preserveWhitespace: preserveWhitespace
      })(view.state, view.dispatch);
      this.onClose();
    },
    onClose: function onClose() {
      this.$props.view.focus();
      this.$emit('close');
    }
  }
};
/**
 * @hidden
 */

var ViewHtmlDialog = ViewHtmlDialogVue2;
export { ViewHtmlDialog, ViewHtmlDialogVue2 };