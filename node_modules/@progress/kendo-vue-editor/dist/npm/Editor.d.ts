import { DefineComponent, RecordPropsDefinition, ComponentOptions, Vue2type } from './additionalTypes';
declare type DefaultData<V> = object | ((this: V) => {});
declare type DefaultMethods<V> = {
    [key: string]: (this: V, ...args: any[]) => any;
};
import { Transaction, EditorView } from '@progress/kendo-editor-common';
import { EditorToolsSettings } from './config/toolsSettings';
import { EditorProps } from './EditorProps';
/** @hidden */
export declare const allTools: {
    Bold: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    Italic: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    Underline: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    Strikethrough: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    Subscript: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    Superscript: {
        comp: any;
        props: EditorToolsSettings.InlineFormatSettings;
    };
    AlignLeft: {
        comp: any;
        props: EditorToolsSettings.AlignSettings;
    };
    AlignCenter: {
        comp: any;
        props: EditorToolsSettings.AlignSettings;
    };
    AlignRight: {
        comp: any;
        props: EditorToolsSettings.AlignSettings;
    };
    AlignJustify: {
        comp: any;
        props: EditorToolsSettings.AlignSettings;
    };
    Indent: {
        comp: any;
        props: EditorToolsSettings.IndentationSettings;
    };
    Outdent: {
        comp: any;
        props: EditorToolsSettings.IndentationSettings;
    };
    OrderedList: {
        comp: any;
        props: EditorToolsSettings.ListSettings;
    };
    UnorderedList: {
        comp: any;
        props: EditorToolsSettings.ListSettings;
    };
    FontSize: {
        comp: any;
        props: EditorToolsSettings.StyleDropDownListSettings;
    };
    FontName: {
        comp: any;
        props: EditorToolsSettings.StyleDropDownListSettings;
    };
    FormatBlock: {
        comp: any;
        props: EditorToolsSettings.FormatBlockDropDownListSettings;
    };
    Undo: {
        comp: any;
        props: EditorToolsSettings.ToolSettings;
    };
    Redo: {
        comp: any;
        props: EditorToolsSettings.ToolSettings;
    };
    Link: {
        comp: any;
        props: EditorToolsSettings.LinkSettings;
    };
    Unlink: {
        comp: any;
        props: EditorToolsSettings.UnlinkSettings;
    };
    InsertImage: {
        comp: any;
        props: EditorToolsSettings.ImageSettings;
    };
    ViewHtml: {
        comp: any;
        props: EditorToolsSettings.ViewHtmlSettings;
    };
    CleanFormatting: {
        comp: any;
        props: EditorToolsSettings.CleanFormattingSettings;
    };
    SelectAll: {
        comp: any;
        props: EditorToolsSettings.SelectAllSettings;
    };
    InsertTable: {
        comp: any;
        props: EditorToolsSettings.InsertTableSettings;
    };
    MergeCells: {
        comp: any;
        props: EditorToolsSettings.MergeCellsSettings;
    };
    SplitCell: {
        comp: any;
        props: EditorToolsSettings.SplitCellSettings;
    };
    AddRowBefore: {
        comp: any;
        props: EditorToolsSettings.AddRowBeforeSettings;
    };
    AddRowAfter: {
        comp: any;
        props: EditorToolsSettings.AddRowAfterSettings;
    };
    AddColumnBefore: {
        comp: any;
        props: EditorToolsSettings.AddColumnBeforeSettings;
    };
    AddColumnAfter: {
        comp: any;
        props: EditorToolsSettings.AddColumnAfterSettings;
    };
    DeleteRow: {
        comp: any;
        props: EditorToolsSettings.DeleteRowSettings;
    };
    DeleteColumn: {
        comp: any;
        props: EditorToolsSettings.DeleteColumnSettings;
    };
    DeleteTable: {
        comp: any;
        props: EditorToolsSettings.DeleteTableSettings;
    };
    Print: {
        comp: any;
        props: EditorToolsSettings.PrintSettings;
    };
    Pdf: {
        comp: any;
        props: EditorToolsSettings.PdfSettings;
    };
    InsertFile: {
        comp: any;
        props: EditorToolsSettings.InsertFileSettings;
    };
    FindAndReplace: {
        comp: any;
        props: EditorToolsSettings.FindReplaceSettings;
    };
    ForeColor: {
        comp: any;
        props: EditorToolsSettings.ApplyColorSettings;
    };
    BackColor: {
        comp: any;
        props: EditorToolsSettings.ApplyColorSettings;
    };
};
/**
 * @hidden
 */
export interface EditorComponentState {
    element: HTMLElement | null;
    _view?: EditorView;
    contentElement: HTMLDivElement | null;
    iframe: HTMLIFrameElement | null;
    trOnChange: Transaction | null;
    htmlOnChange: string | null;
    pasteEvent?: ClipboardEvent;
}
/**
 * @hidden
 */
export interface EditorComputed {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface EditorMethods {
    [key: string]: any;
}
/**
 * @hidden
 */
export interface EditorData {
    view?: EditorView;
    linkDialog?: boolean;
}
/**
 * @hidden
 */
export interface EditorAll extends Vue2type, EditorMethods, EditorData, EditorComputed, EditorComponentState {
}
/**
 * @hidden
 */
declare let EditorVue2: ComponentOptions<EditorAll, DefaultData<EditorData>, DefaultMethods<EditorAll>, EditorComputed, RecordPropsDefinition<EditorProps>>;
/**
 * Represents the [Kendo UI for Vue Editor component]({% slug overview_editor %}).
 *
 *  ```jsx
 *  <template>
 *    <div>
 *      <Editor
 *        :tools="tools"
 *        :content-style="{
 *          height: '690px',
 *        }"
 *        :default-content="content"
 *      />
 *    </div>
 *  </template>
 *
 *  <script>
 *  import { Editor } from "@progress/kendo-vue-editor";
 *  import content from "./content-overview";
 *
 *  export default {
 *    components: {
 *      Editor,
 *    },
 *    data() {
 *      return {
 *        tools: [
 *          ["Bold", "Italic", "Underline", "Strikethrough"],
 *          ["Subscript", "Superscript"],
 *          ["AlignLeft", "AlignCenter", "AlignRight", "AlignJustify"],
 *          ["Indent", "Outdent"],
 *          ["OrderedList", "UnorderedList"],
 *          "FontSize",
 *          "FontName",
 *          "FormatBlock",
 *          ["Undo", "Redo"],
 *          ["Link", "Unlink", "InsertImage", "ViewHtml"],
 *          ["InsertTable"],
 *          ["AddRowBefore", "AddRowAfter", "AddColumnBefore", "AddColumnAfter"],
 *          ["DeleteRow", "DeleteColumn", "DeleteTable"],
 *          ["MergeCells", "SplitCell"],
 *        ],
 *        content: content,
 *      };
 *    },
 *  };
 *  </script>
 *  ```
 *
 *
 *
 *  ### props <span class='code'>Readonly&lt;[EditorProps]({% slug api_editor_editorprops %})</span>
 *  The props of the Editor component.
 *
 *  ### contentElement <span class='code'>HTMLDivElement</span>
 *  Returns the content-editable DOM element of the Editor.
 *
 *  ### element <span class='code'>HTMLElement</span>
 *  Returns the DOM element of the Editor.
 *
 *  ### value <span class='code'>Node | string</span>
 *  The value of the Editor.
 *
 *  ### view <span class='code'>EditorView&lt;any&gt;</span>
 *  Returns the `view` object of the Editor.
 */
declare const Editor: DefineComponent<EditorProps, any, EditorData, EditorComputed, EditorMethods, {}, {}, {}, string, EditorProps, EditorProps, {}>;
export { Editor, EditorVue2 };
