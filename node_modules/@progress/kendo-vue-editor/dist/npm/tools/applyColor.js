"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ApplyColorVue2 = exports.ApplyColor = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_inputs_1 = require("@progress/kendo-vue-inputs");

var kendo_editor_common_1 = require("@progress/kendo-editor-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("../messages");
/**
 * @hidden
 */


var ApplyColorVue2 = {
  name: 'KendoApplyColor',
  props: {
    view: Object,
    color: String,
    colorPickerProps: Object,
    commandName: String,
    dir: String
  },
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var _a = this.$props,
        colorPickerProps = _a.colorPickerProps,
        dir = _a.dir;
    var titleKey = colorPickerProps.title;
    var localization = kendo_vue_intl_1.provideLocalizationService(this);

    var cpProps = __assign(__assign({}, colorPickerProps), {
      dir: dir,
      title: titleKey ? localization.toLanguageString(titleKey, messages_1.messages[titleKey]) : titleKey
    });

    var cp = h(kendo_vue_inputs_1.ColorPicker, __assign({
      onChange: this.onChange,
      onActivecolorclick: this.onChange,
      on: this.v3 ? undefined : {
        'change': this.onChange,
        'activecolorclick': this.onChange
      },
      attrs: this.v3 ? undefined : cpProps
    }, cpProps));
    return cp;
  },
  methods: {
    onChange: function onChange(event) {
      var _a = this.$props,
          view = _a.view,
          color = _a.color,
          colorPickerProps = _a.colorPickerProps,
          commandName = _a.commandName;

      if (view) {
        kendo_editor_common_1.applyInlineStyle({
          style: color,
          value: event.value
        }, commandName)(view.state, view.dispatch);
        var _b = colorPickerProps.view,
            paletteView = _b === void 0 ? 'palette' : _b;

        if (paletteView === 'palette') {
          view.focus();
        }
      }
    }
  }
};
exports.ApplyColorVue2 = ApplyColorVue2;
/**
 * @hidden
 */

var ApplyColor = ApplyColorVue2;
exports.ApplyColor = ApplyColor;