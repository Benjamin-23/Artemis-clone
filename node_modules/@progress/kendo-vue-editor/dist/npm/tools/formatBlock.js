"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

var __spreadArrays = undefined && undefined.__spreadArrays || function () {
  for (var s = 0, i = 0, il = arguments.length; i < il; i++) {
    s += arguments[i].length;
  }

  for (var r = Array(s), k = 0, i = 0; i < il; i++) {
    for (var a = arguments[i], j = 0, jl = a.length; j < jl; j++, k++) {
      r[k] = a[j];
    }
  }

  return r;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.FormatBlockVue2 = exports.FormatBlock = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_dropdowns_1 = require("@progress/kendo-vue-dropdowns");

var kendo_editor_common_1 = require("@progress/kendo-editor-common");

var utils_1 = require("./utils");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("./../messages");
/**
 * @hidden
 */


var FormatBlockVue2 = {
  name: 'KendoFormatBlock',
  props: __assign({
    view: Object,
    settings: {
      type: Object,
      default: function _default() {
        return {
          messages: {}
        };
      }
    }
  }, kendo_vue_dropdowns_1.DropDownList.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;

    var _a = this.$props,
        view = _a.view,
        render = _a.render,
        dataItems = _a.dataItems,
        settings = _a.settings,
        defaultItemProps = _a.defaultItem,
        other = __rest(_a, ["view", "render", "dataItems", "settings", "defaultItem"]);

    var items = dataItems || settings.items;
    var state = view && view.state;
    var formats = state ? kendo_editor_common_1.getBlockFormats(state) : [];
    var value = new Set(formats).size === 1 ? formats[0] : null;
    var defaultItem = defaultItemProps || settings.defaultItem;
    var localization = kendo_vue_intl_1.provideLocalizationService(this);

    if (defaultItem && defaultItem.localizationKey) {
      defaultItem = __assign({}, defaultItem);
      defaultItem.text = defaultItem.localizationKey ? localization.toLanguageString(defaultItem.localizationKey, messages_1.messages[defaultItem.localizationKey]) : defaultItem.text;
    }

    var ddlProps = __assign(__assign(__assign({}, other), {
      value: value ? items.find(function (i) {
        return i.value === value;
      }) : value,
      dataItems: items,
      defaultItem: defaultItem,
      itemRender: this.customItemRender,
      textField: 'text',
      dataItemKey: 'value',
      leftRightKeysNavigation: false,
      popupSettings: {
        width: '170px'
      }
    }), settings.props);

    var dropdown = h(kendo_vue_dropdowns_1.DropDownList, __assign({
      onChange: this.onChange,
      on: this.v3 ? undefined : {
        'change': this.onChange
      },
      style: utils_1.userSelectNone,
      attrs: this.v3 ? undefined : ddlProps
    }, ddlProps));
    return dropdown;
  },
  methods: {
    customItemRender: function customItemRender(h, li, itemProps) {
      return itemProps.dataItem.style ? h('li', {
        class: itemProps.itemClass,
        onClick: itemProps.onClick,
        on: {
          click: itemProps.onClick
        }
      }, [h('span', {
        style: itemProps.dataItem.style
      }, __spreadArrays(li.children))]) : li;
    },
    onChange: function onChange(e) {
      var _a = this.$props,
          view = _a.view,
          settings = _a.settings;
      var item = e.target.value;

      if (view && kendo_editor_common_1.formatBlockElements(item.value, settings.commandName)(view.state, view.dispatch)) {
        var event_1 = e.event;

        if (event_1 && event_1.type === 'click') {
          view.focus();
        }
      }
    }
  }
};
exports.FormatBlockVue2 = FormatBlockVue2;
/**
 * @hidden
 */

var FormatBlock = FormatBlockVue2;
exports.FormatBlock = FormatBlock;