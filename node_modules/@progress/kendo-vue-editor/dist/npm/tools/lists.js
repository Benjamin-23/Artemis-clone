"use strict";

var __assign = undefined && undefined.__assign || function () {
  __assign = Object.assign || function (t) {
    for (var s, i = 1, n = arguments.length; i < n; i++) {
      s = arguments[i];

      for (var p in s) {
        if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];
      }
    }

    return t;
  };

  return __assign.apply(this, arguments);
};

var __rest = undefined && undefined.__rest || function (s, e) {
  var t = {};

  for (var p in s) {
    if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0) t[p] = s[p];
  }

  if (s != null && typeof Object.getOwnPropertySymbols === "function") for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) {
    if (e.indexOf(p[i]) < 0 && Object.prototype.propertyIsEnumerable.call(s, p[i])) t[p[i]] = s[p[i]];
  }
  return t;
};

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ListVue2 = exports.List = void 0; // @ts-ignore

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var kendo_editor_common_1 = require("@progress/kendo-editor-common");

var kendo_vue_intl_1 = require("@progress/kendo-vue-intl");

var messages_1 = require("./../messages");
/**
 * @hidden
 */


var ListVue2 = {
  name: 'KendoList',
  props: __assign({
    view: Object,
    settings: {
      type: Object,
      default: function _default() {
        return {
          messages: {}
        };
      }
    }
  }, kendo_vue_buttons_1.Button.props),
  inject: {
    kendoLocalizationService: {
      default: null
    }
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;

    var _a = this.$props,
        view = _a.view,
        render = _a.render,
        settings = _a.settings,
        other = __rest(_a, ["view", "render", "settings"]);

    var isActive = false;
    var localization = kendo_vue_intl_1.provideLocalizationService(this);
    var titleKey = settings.messages.title;
    var types = settings.types;
    var listType = settings.listType;

    if (view) {
      var state = view.state;
      var nodes = state.schema.nodes;
      var hasOl = kendo_editor_common_1.hasNode(state, nodes[types.orderedList]),
          hasUl = kendo_editor_common_1.hasNode(state, nodes[types.bulletList]);

      if (listType === types.orderedList) {
        isActive = hasOl && !hasUl;
      } else {
        isActive = !hasOl && hasUl;
      }
    }

    var buttonProps = __assign(__assign(__assign({}, other), {
      selected: isActive,
      togglable: true,
      title: localization.toLanguageString(titleKey, messages_1.messages[titleKey])
    }), settings.props);

    var button = h(kendo_vue_buttons_1.Button, __assign({
      onClick: this.handleClick,
      onMousedown: this.preventDefault,
      onPointerdown: this.preventDefault,
      on: this.v3 ? undefined : {
        'click': this.handleClick,
        'mousedown': this.preventDefault,
        'pointerdown': this.preventDefault
      },
      attrs: this.v3 ? undefined : buttonProps
    }, buttonProps));
    return button;
  },
  methods: {
    handleClick: function handleClick() {
      var _a = this.$props,
          view = _a.view,
          settings = _a.settings;
      var types = settings.types;
      var listType = settings.listType;

      if (this.view) {
        kendo_editor_common_1.toggleList(view.state, view.dispatch, view, __assign({
          listType: listType
        }, types), settings.commandName);
      }
    },
    preventDefault: function preventDefault(e) {
      e.preventDefault();
    }
  }
};
exports.ListVue2 = ListVue2;
/**
 * @hidden
 */

var List = ListVue2;
exports.List = List;