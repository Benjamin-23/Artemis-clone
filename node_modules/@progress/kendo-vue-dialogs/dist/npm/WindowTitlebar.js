"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.WindowTitleBarVue2 = exports.WindowTitleBar = void 0; // @ts-ignore

var kendo_vue_common_1 = require("@progress/kendo-vue-common");

var Vue = require("vue");

var allVue = Vue;
var gh = allVue.h;

var kendo_vue_buttons_1 = require("@progress/kendo-vue-buttons");

var StageEnum_1 = require("./StageEnum");
/**
 * @hidden
 */


var WindowTitleBarVue2 = {
  props: {
    id: String,
    stage: String,
    closeButton: [String, Function, Object, Boolean],
    minimizeButton: [String, Function, Object, Boolean],
    maximizeButton: [String, Function, Object, Boolean],
    restoreButton: [String, Function, Object, Boolean],
    title: String,
    titleRender: [String, Function, Object, Boolean]
  },
  // @ts-ignore
  setup: !gh ? undefined : function () {
    var v3 = !!gh;
    return {
      v3: v3
    };
  },
  methods: {
    onDoubleClick: function onDoubleClick(e) {
      this.$emit('doubleclick', e);
    },
    onMinimizeClick: function onMinimizeClick(e) {
      this.$emit('minimizeclick', e);
    },
    onFullScreenClick: function onFullScreenClick(e) {
      this.$emit('fullscreenclick', e);
    },
    onRestoreClick: function onRestoreClick(e) {
      this.$emit('restoreclick', e);
    },
    onCloseClick: function onCloseClick(e) {
      this.$emit('closeclick', e);
    }
  },
  // @ts-ignore
  render: function render(createElement) {
    var h = gh || createElement;
    var props = this.$props;
    var stage = props.stage,
        title = props.title,
        titleRender = props.titleRender,
        minimizeButton = props.minimizeButton,
        maximizeButton = props.maximizeButton,
        restoreButton = props.restoreButton,
        closeButton = props.closeButton;
    var titleElement = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: titleRender,
      defaultRendering: title
    });
    var minimizeButtonDefault = // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window-minimize',
        fillMode: 'flat'
      },
      icon: 'window-minimize',
      fillMode: 'flat',
      onClick: this.onMinimizeClick,
      on: this.v3 ? undefined : {
        "click": this.onMinimizeClick
      }
    });
    var minimizeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: minimizeButton,
      defaultRendering: minimizeButtonDefault
    });
    var maximizeButtonDefault = // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window-maximize',
        fillMode: 'flat'
      },
      icon: 'window-maximize',
      fillMode: 'flat',
      onClick: this.onFullScreenClick,
      on: this.v3 ? undefined : {
        "click": this.onFullScreenClick
      }
    });
    var maximizeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: maximizeButton,
      defaultRendering: maximizeButtonDefault
    });
    var restoreButtonDefault = // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'window-restore',
        fillMode: 'flat'
      },
      icon: 'window-restore',
      fillMode: 'flat',
      onClick: this.onRestoreClick,
      on: this.v3 ? undefined : {
        "click": this.onRestoreClick
      }
    });
    var restoreButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: restoreButton,
      defaultRendering: restoreButtonDefault
    });
    var closeButtonDefault = // @ts-ignore
    h(kendo_vue_buttons_1.Button, {
      type: "button",
      attrs: this.v3 ? undefined : {
        type: "button",
        icon: 'x',
        fillMode: 'flat'
      },
      icon: 'x',
      fillMode: 'flat',
      onClick: this.onCloseClick,
      on: this.v3 ? undefined : {
        "click": this.onCloseClick
      }
    });
    var closeButtonRender = kendo_vue_common_1.getTemplate.call(this, {
      h: h,
      template: closeButton,
      defaultRendering: closeButtonDefault
    });
    return h("div", {
      "class": "k-window-titlebar k-dialog-titlebar",
      style: {
        touchAction: 'none'
      },
      onDblclick: this.onDoubleClick,
      on: this.v3 ? undefined : {
        "dblclick": this.onDoubleClick
      }
    }, [h("div", {
      "class": "k-window-title"
    }, [titleElement]), h("div", {
      "class": "k-window-actions"
    }, [stage === StageEnum_1.windowStage.DEFAULT && minimizeButtonRender, stage === StageEnum_1.windowStage.DEFAULT && maximizeButtonRender, stage !== StageEnum_1.windowStage.DEFAULT && restoreButtonRender]), closeButtonRender]);
  }
};
exports.WindowTitleBarVue2 = WindowTitleBarVue2;
/**
 * @hidden
 */

var WindowTitleBar = WindowTitleBarVue2;
exports.WindowTitleBar = WindowTitleBar;