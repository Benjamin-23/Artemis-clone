import { NodeType, Schema } from 'prosemirror-model';
import { EditorState, Transaction } from 'prosemirror-state';
import { EditorView } from 'prosemirror-view';
import { Command } from './types/command';
declare type ListOptions = {
    listType: string;
    orderedList: string;
    bulletList: string;
    listItem: string;
    listAttrs?: any;
};
/**
 * Extracts list-style-type style from node's attributes.
 * @param attrs - The attributes of the list node
 * @returns The extracted list-style-type.
 */
export declare const listStyle: (attrs: {
    [key: string]: any;
}) => string;
export declare const toggleList: (state: EditorState<any>, dispatch: (tr: Transaction<any>) => void, view: EditorView<any>, options: ListOptions, command?: string) => boolean;
export declare function toggleUnorderedList(state: EditorState, dispatch: (tr: Transaction) => void, view: EditorView): any;
export declare function toggleOrderedList(state: EditorState, dispatch: (tr: Transaction) => void, view: EditorView): any;
export declare const splitListItemKeepMarks: (itemType: NodeType<Schema<any, any>>) => Command;
export {};
